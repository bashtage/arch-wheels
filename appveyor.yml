skip_tags: true
clone_depth: 50

environment:
  global:
    BUILD_COMMIT: "4.8.0"
    PYPI_UPLOAD: "false"
    TESTPYPI_UPLOAD: "false" # "true" or "false"
    CONDA_BUILD: "false"
    CONDA_UPLOAD: "true"
    PACKAGE_NAME: arch
    CONDA_NUMPY_VERSION: "1.16"
    MIN_NUMPY_VER: "1.15"
    BUILD_DEPENDS: "cython pandas statsmodels patsy scipy"
    TEST_DEPENDS: "cython pandas statsmodels patsy scipy matplotlib"
    PIP_PACKAGES: "cached_property pytest"
  TESTPYPI_USERNAME:
    secure: 9D67F9Bcy8PITwg1cezOgw==
  TESTPYPI_PASSWORD:
    secure: sEkgnJNTN/bQu3Lh8PysOA==
  PYPI_USERNAME:
    secure: 9D67F9Bcy8PITwg1cezOgw==
  PYPI_PASSWORD:
    secure: ufGrse+xSx3blI6bh9bnSg==
  ANACONDA_USERNAME:
    secure: 9D67F9Bcy8PITwg1cezOgw==
  ANACONDA_TOKEN:
    secure: sGNIyeEysSzD4W0Q9SMB2sK69a5hiM6qGIGPHhtCH9vpGrlSN7nOXr/zbg4X+vvK

  matrix:
    - PYTHON: "C:\\Miniconda35"
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "32"
    - PYTHON: "C:\\Miniconda35-x64"
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "64"
    - PYTHON: "C:\\Miniconda36"
      PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "32"
    - PYTHON: "C:\\Miniconda36-x64"
      PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "64"
      CONDA_BUILD: "true"
    - PYTHON: "C:\\Miniconda37"
      PYTHON_VERSION: "3.7"
      PYTHON_ARCH: "32"
    - PYTHON: "C:\\Miniconda37-x64"
      PYTHON_VERSION: "3.7"
      PYTHON_ARCH: "64"
      CONDA_BUILD: "true"
    - PYTHON: "C:\\Miniconda"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "32"
    - PYTHON: "C:\\Miniconda-x64"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "64"
      CONDA_BUILD: "true"

# We always use a 64-bit machine, but can build x86 distributions
# with the TARGET_ARCH variable.
platform:
    - x64

os:
    - Visual Studio 2015

matrix:
    fast_finish: false

install:
    - echo "C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64 > "C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\amd64/vcvars64.bat"
    # Install miniconda and fix headers
    - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PYTHON%\Library\bin;%PATH%
    - conda info
    - conda update conda -y

    # Check that we have the expected version and architecture for Python
    - python --version
    - python -c "import struct; print(struct.calcsize('P') * 8)"

    # clone a origsel/python-appveyor-demo
    # this repo includes a simple package to test appveyor
    - git clone git://github.com/bashtage/arch.git
    - git fetch --all --tags

build_script:
    # Install build requirements
    - conda install --yes numpy>=%MIN_NUMPY_VER% %BUILD_DEPENDS%
    - python -m pip install --upgrade pip
    - pip install %PIP_PACKAGES% --upgrade

    # build wheel:
    - set "MULTIBUILD_DIR=%cd%"
    - cd arch
    - git checkout %BUILD_COMMIT%
    - python setup.py bdist_wheel
    - ls dist/*
    - set "WHEELBUILDER_DIR=%cd%\dist"
    - echo %WHEELBUILDER_DIR%

test_script:
    # create test env
    - conda create --yes -n test_env python=%PYTHON_VERSION% numpy>=%MIN_NUMPY_VER% %TEST_DEPENDS%
    - activate test_env
    - pip install %PIP_PACKAGES% --upgrade

    # install from wheel
    - pip install --no-index --find-links dist/ %PACKAGE_NAME%

    # run tests from install wheel
    - cd ..
    - python -c "import arch; arch.test()"

on_success:
  - echo "Upload here"
  - cd %MULTIBUILD_DIR%
  - pip install twine
  - twine-upload.bat
  - build-conda.bat
