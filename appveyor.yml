skip_tags: true
clone_depth: 50

matrix:
    fast_finish: false

environment:
  global:
    BUILD_COMMIT: "4.14" # "master"
    PYPI_UPLOAD: "true" # "true" or "false"
    TESTPYPI_UPLOAD: "false"
    REPO_DIR: arch
    PACKAGE_NAME: arch
    BUILD_DEPENDS: "cython numpy scipy==1.3.2 property_cached"
    EXTRA_BUILD_DEPENDS: "pandas statsmodels"
    TEST_DEPENDS: "cython numpy scipy==1.3.2 statsmodels pandas nose pytest property_cached"
    CONDA_BUILD: "skip"
  TESTPYPI_USERNAME:
    secure: 9D67F9Bcy8PITwg1cezOgw==
  TESTPYPI_PASSWORD:
    secure: sEkgnJNTN/bQu3Lh8PysOA==
  PYPI_USERNAME:
    secure: 9D67F9Bcy8PITwg1cezOgw==
  PYPI_PASSWORD:
    secure: ufGrse+xSx3blI6bh9bnSg==
  ANACONDA_USERNAME:
    secure: 9D67F9Bcy8PITwg1cezOgw==
  ANACONDA_TOKEN:
    secure: 36nPiNN0128SGPNp1hya5eIJUDBCcKV1okGuHTfwdvmgCQohx8i35hFmdjQl0WHf

  matrix:
    - PYTHON: C:\Python38-x64
      PYTHON_VERSION: 3.8
      PYTHON_ARCH: 64

    - PYTHON: C:\Python37-x64
      PYTHON_VERSION: 3.7
      PYTHON_ARCH: 64

    - PYTHON: C:\Python36-x64
      PYTHON_VERSION: 3.6
      PYTHON_ARCH: 64

    - PYTHON: C:\Python38
      PYTHON_VERSION: 3.8
      PYTHON_ARCH: 32

    - PYTHON: C:\Python37
      PYTHON_VERSION: 3.7
      PYTHON_ARCH: 32

    - PYTHON: C:\Python36
      PYTHON_VERSION: 3.6
      PYTHON_ARCH: 32

    - CONDA_BUILD: "true"
      CONDA_UPLOAD: "true"
      PYTHON: C:\Python38-x64
      PYTHON_VERSION: 3.8
      PYTHON_ARCH: 64


# We always use a 64-bit machine, but can build x86 distributions
# with the TARGET_ARCH variable.
platform:
    - x64

install:
    - git submodule update --init --recursive
    - git fetch --all --tags

    - ps: . .\build-conda.ps1

    # Install new Python if necessary
    - ps: .\multibuild\install_python.ps1

    # Set path
    - SET PATH=%PYTHON%;%PYTHON%\Scripts;%PATH%

    # Check that we have the expected version and architecture for Python
    - python --version
    - python -m pip install --upgrade pip wheel
    - python -c "import struct; print(struct.calcsize('P') * 8)"

    # clone a origsel/python-appveyor-demo
    # this repo includes a simple package to test appveyor
    - set "WHEELBUILDER_DIR=%cd%"
    - cd arch
    - cd ..

build_script:
    # Install build requirements
    - pip install %BUILD_DEPENDS%
    - pip install %EXTRA_BUILD_DEPENDS%

    # build wheel:
    - cd %REPO_DIR%
    - git checkout %BUILD_COMMIT%
    - python setup.py bdist_wheel
    - ls dist/*

test_script:
    # create test env
    - pip install %TEST_DEPENDS%

    # install from wheel
    - pip install --no-index --find-links dist/ %PACKAGE_NAME%

    # run tests from install wheel
    - mkdir _for_testing
    - cd _for_testing
    - python -c "import arch; arch.test()"

on_success:
    - echo "Upload here"
    - cd %WHEELBUILDER_DIR%\
    - pip install twine
    - call twine-upload.bat
